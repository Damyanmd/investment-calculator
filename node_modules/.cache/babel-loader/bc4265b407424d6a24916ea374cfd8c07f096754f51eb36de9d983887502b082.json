{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u0438\\\\Udemy code React\\\\09-practice-tax-calculator\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from \"./assets/investment-calculator-logo.png\";\nimport SubmitForm from \"./components/SubmitForm\";\nimport { useState } from \"react\";\nimport TableInfo from \"./components/TableInfo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState(null);\n  const [userInput, setUserInput] = useState(null);\n  console.log(userInput);\n  const calculateHandler = userInput => {\n    setUserInput(userInput);\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput.currentSavingsData; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput.yearlySavingsData; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput.expectedInterestData / 100;\n    const duration = +userInput.investmentDurationData;\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    setData(yearlyData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Investment Calculator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SubmitForm, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), data && /*#__PURE__*/_jsxDEV(TableInfo, {\n      yearlyData: data,\n      initialInvestment: userInput.currentSavingsData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rG3JiPpqI3l5ZF14GyDbsMu3Vbc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","SubmitForm","useState","TableInfo","jsxDEV","_jsxDEV","App","_s","data","setData","userInput","setUserInput","console","log","calculateHandler","yearlyData","currentSavings","currentSavingsData","yearlyContribution","yearlySavingsData","expectedReturn","expectedInterestData","duration","investmentDurationData","i","yearlyInterest","push","year","savingsEndOfYear","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","initialInvestment","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/Документи/Udemy code React/09-practice-tax-calculator/src/App.js"],"sourcesContent":["import logo from \"./assets/investment-calculator-logo.png\";\nimport SubmitForm from \"./components/SubmitForm\";\nimport { useState } from \"react\";\nimport TableInfo from \"./components/TableInfo\";\n\nfunction App() {\n  const [data, setData] = useState(null);\n  const [userInput, setUserInput] = useState(null);\n  console.log(userInput);\n  const calculateHandler = (userInput) => {\n    setUserInput(userInput);\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput.currentSavingsData; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput.yearlySavingsData; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput.expectedInterestData / 100;\n    const duration = +userInput.investmentDurationData;\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n    setData(yearlyData);\n  };\n\n  return (\n    <div>\n      <header className=\"header\">\n        <img src={logo} alt=\"logo\" />\n        <h1>Investment Calculator</h1>\n      </header>\n\n      <SubmitForm onCalculate={calculateHandler} />\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n      {data && (\n        <TableInfo\n          yearlyData={data}\n          initialInvestment={userInput.currentSavingsData}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,yCAAyC;AAC1D,OAAOC,UAAU,MAAM,yBAAyB;AAChD,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAChDU,OAAO,CAACC,GAAG,CAACH,SAAS,CAAC;EACtB,MAAMI,gBAAgB,GAAIJ,SAAS,IAAK;IACtCC,YAAY,CAACD,SAAS,CAAC;IAEvB,MAAMK,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACN,SAAS,CAACO,kBAAkB,CAAC,CAAC;IACpD,MAAMC,kBAAkB,GAAG,CAACR,SAAS,CAACS,iBAAiB,CAAC,CAAC;IACzD,MAAMC,cAAc,GAAG,CAACV,SAAS,CAACW,oBAAoB,GAAG,GAAG;IAC5D,MAAMC,QAAQ,GAAG,CAACZ,SAAS,CAACa,sBAAsB;;IAElD;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGT,cAAc,GAAGI,cAAc;MACtDJ,cAAc,IAAIS,cAAc,GAAGP,kBAAkB;MACrDH,UAAU,CAACW,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAEZ,cAAc;QAChCE,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IACAT,OAAO,CAACM,UAAU,CAAC;EACrB,CAAC;EAED,oBACEV,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAQyB,SAAS,EAAC,QAAQ;MAAAD,QAAA,gBACxBxB,OAAA;QAAK0B,GAAG,EAAE/B,IAAK;QAACgC,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7B/B,OAAA;QAAAwB,QAAA,EAAI;MAAqB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eAET/B,OAAA,CAACJ,UAAU;MAACoC,WAAW,EAAEvB;IAAiB;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAI5C5B,IAAI,iBACHH,OAAA,CAACF,SAAS;MACRY,UAAU,EAAEP,IAAK;MACjB8B,iBAAiB,EAAE5B,SAAS,CAACO;IAAmB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC7B,EAAA,CAhDQD,GAAG;AAAAiC,EAAA,GAAHjC,GAAG;AAkDZ,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}